// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.19.4
// source: log.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Workmode int32

const (
	Workmode_WORKMODE_UNKNOWN       Workmode = 0
	Workmode_WORKMODE_SEARCH_POUNCE Workmode = 1
	Workmode_WORKMODE_RUN           Workmode = 2
)

// Enum value maps for Workmode.
var (
	Workmode_name = map[int32]string{
		0: "WORKMODE_UNKNOWN",
		1: "WORKMODE_SEARCH_POUNCE",
		2: "WORKMODE_RUN",
	}
	Workmode_value = map[string]int32{
		"WORKMODE_UNKNOWN":       0,
		"WORKMODE_SEARCH_POUNCE": 1,
		"WORKMODE_RUN":           2,
	}
)

func (x Workmode) Enum() *Workmode {
	p := new(Workmode)
	*p = x
	return p
}

func (x Workmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workmode) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[0].Descriptor()
}

func (Workmode) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[0]
}

func (x Workmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workmode.Descriptor instead.
func (Workmode) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FormatVersion int32                  `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetFormatVersion() int32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

type Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Entry:
	//
	//	*Entry_Qso
	//	*Entry_Station
	//	*Entry_Contest
	//	*Entry_Keyer
	//	*Entry_Qtc
	Entry         isEntry_Entry `protobuf_oneof:"entry"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entry) Reset() {
	*x = Entry{}
	mi := &file_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

func (x *Entry) GetEntry() isEntry_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Entry) GetQso() *QSO {
	if x != nil {
		if x, ok := x.Entry.(*Entry_Qso); ok {
			return x.Qso
		}
	}
	return nil
}

func (x *Entry) GetStation() *Station {
	if x != nil {
		if x, ok := x.Entry.(*Entry_Station); ok {
			return x.Station
		}
	}
	return nil
}

func (x *Entry) GetContest() *Contest {
	if x != nil {
		if x, ok := x.Entry.(*Entry_Contest); ok {
			return x.Contest
		}
	}
	return nil
}

func (x *Entry) GetKeyer() *Keyer {
	if x != nil {
		if x, ok := x.Entry.(*Entry_Keyer); ok {
			return x.Keyer
		}
	}
	return nil
}

func (x *Entry) GetQtc() *QTC {
	if x != nil {
		if x, ok := x.Entry.(*Entry_Qtc); ok {
			return x.Qtc
		}
	}
	return nil
}

type isEntry_Entry interface {
	isEntry_Entry()
}

type Entry_Qso struct {
	Qso *QSO `protobuf:"bytes,1,opt,name=qso,proto3,oneof"`
}

type Entry_Station struct {
	Station *Station `protobuf:"bytes,2,opt,name=station,proto3,oneof"`
}

type Entry_Contest struct {
	Contest *Contest `protobuf:"bytes,3,opt,name=contest,proto3,oneof"`
}

type Entry_Keyer struct {
	Keyer *Keyer `protobuf:"bytes,4,opt,name=keyer,proto3,oneof"`
}

type Entry_Qtc struct {
	Qtc *QTC `protobuf:"bytes,5,opt,name=qtc,proto3,oneof"`
}

func (*Entry_Qso) isEntry_Entry() {}

func (*Entry_Station) isEntry_Entry() {}

func (*Entry_Contest) isEntry_Entry() {}

func (*Entry_Keyer) isEntry_Entry() {}

func (*Entry_Qtc) isEntry_Entry() {}

type QSO struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Callsign      string                 `protobuf:"bytes,1,opt,name=callsign,proto3" json:"callsign,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Band          string                 `protobuf:"bytes,3,opt,name=band,proto3" json:"band,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	MyReport      string                 `protobuf:"bytes,5,opt,name=my_report,json=myReport,proto3" json:"my_report,omitempty"`
	MyNumber      int32                  `protobuf:"varint,6,opt,name=my_number,json=myNumber,proto3" json:"my_number,omitempty"`
	TheirReport   string                 `protobuf:"bytes,7,opt,name=their_report,json=theirReport,proto3" json:"their_report,omitempty"`
	TheirNumber   int32                  `protobuf:"varint,8,opt,name=their_number,json=theirNumber,proto3" json:"their_number,omitempty"`
	LogTimestamp  int64                  `protobuf:"varint,9,opt,name=log_timestamp,json=logTimestamp,proto3" json:"log_timestamp,omitempty"`
	MyXchange     string                 `protobuf:"bytes,10,opt,name=my_xchange,json=myXchange,proto3" json:"my_xchange,omitempty"`          // deprecated
	TheirXchange  string                 `protobuf:"bytes,11,opt,name=their_xchange,json=theirXchange,proto3" json:"their_xchange,omitempty"` // deprecated
	Frequency     float64                `protobuf:"fixed64,12,opt,name=frequency,proto3" json:"frequency,omitempty"`
	MyExchange    []string               `protobuf:"bytes,14,rep,name=my_exchange,json=myExchange,proto3" json:"my_exchange,omitempty"`
	TheirExchange []string               `protobuf:"bytes,15,rep,name=their_exchange,json=theirExchange,proto3" json:"their_exchange,omitempty"`
	Workmode      Workmode               `protobuf:"varint,16,opt,name=workmode,proto3,enum=pb.Workmode" json:"workmode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QSO) Reset() {
	*x = QSO{}
	mi := &file_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QSO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSO) ProtoMessage() {}

func (x *QSO) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSO.ProtoReflect.Descriptor instead.
func (*QSO) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{2}
}

func (x *QSO) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *QSO) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QSO) GetBand() string {
	if x != nil {
		return x.Band
	}
	return ""
}

func (x *QSO) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QSO) GetMyReport() string {
	if x != nil {
		return x.MyReport
	}
	return ""
}

func (x *QSO) GetMyNumber() int32 {
	if x != nil {
		return x.MyNumber
	}
	return 0
}

func (x *QSO) GetTheirReport() string {
	if x != nil {
		return x.TheirReport
	}
	return ""
}

func (x *QSO) GetTheirNumber() int32 {
	if x != nil {
		return x.TheirNumber
	}
	return 0
}

func (x *QSO) GetLogTimestamp() int64 {
	if x != nil {
		return x.LogTimestamp
	}
	return 0
}

func (x *QSO) GetMyXchange() string {
	if x != nil {
		return x.MyXchange
	}
	return ""
}

func (x *QSO) GetTheirXchange() string {
	if x != nil {
		return x.TheirXchange
	}
	return ""
}

func (x *QSO) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *QSO) GetMyExchange() []string {
	if x != nil {
		return x.MyExchange
	}
	return nil
}

func (x *QSO) GetTheirExchange() []string {
	if x != nil {
		return x.TheirExchange
	}
	return nil
}

func (x *QSO) GetWorkmode() Workmode {
	if x != nil {
		return x.Workmode
	}
	return Workmode_WORKMODE_UNKNOWN
}

type Station struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Callsign      string                 `protobuf:"bytes,1,opt,name=callsign,proto3" json:"callsign,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Locator       string                 `protobuf:"bytes,3,opt,name=locator,proto3" json:"locator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Station) Reset() {
	*x = Station{}
	mi := &file_log_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Station) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Station) ProtoMessage() {}

func (x *Station) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Station.ProtoReflect.Descriptor instead.
func (*Station) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3}
}

func (x *Station) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *Station) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Station) GetLocator() string {
	if x != nil {
		return x.Locator
	}
	return ""
}

type Contest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Name                    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnterTheirNumber        bool                   `protobuf:"varint,2,opt,name=enter_their_number,json=enterTheirNumber,proto3" json:"enter_their_number,omitempty"`                      // deprecated
	EnterTheirXchange       bool                   `protobuf:"varint,3,opt,name=enter_their_xchange,json=enterTheirXchange,proto3" json:"enter_their_xchange,omitempty"`                   // deprecated
	RequireTheirXchange     bool                   `protobuf:"varint,4,opt,name=require_their_xchange,json=requireTheirXchange,proto3" json:"require_their_xchange,omitempty"`             // deprecated
	AllowMultiBand          bool                   `protobuf:"varint,5,opt,name=allow_multi_band,json=allowMultiBand,proto3" json:"allow_multi_band,omitempty"`                            // deprecated
	AllowMultiMode          bool                   `protobuf:"varint,6,opt,name=allow_multi_mode,json=allowMultiMode,proto3" json:"allow_multi_mode,omitempty"`                            // deprecated
	SameCountryPoints       int32                  `protobuf:"varint,7,opt,name=same_country_points,json=sameCountryPoints,proto3" json:"same_country_points,omitempty"`                   // deprecated
	SameContinentPoints     int32                  `protobuf:"varint,8,opt,name=same_continent_points,json=sameContinentPoints,proto3" json:"same_continent_points,omitempty"`             // deprecated
	SpecificCountryPoints   int32                  `protobuf:"varint,9,opt,name=specific_country_points,json=specificCountryPoints,proto3" json:"specific_country_points,omitempty"`       // deprecated
	SpecificCountryPrefixes []string               `protobuf:"bytes,10,rep,name=specific_country_prefixes,json=specificCountryPrefixes,proto3" json:"specific_country_prefixes,omitempty"` // deprecated
	OtherPoints             int32                  `protobuf:"varint,11,opt,name=other_points,json=otherPoints,proto3" json:"other_points,omitempty"`                                      // deprecated
	Multis                  *Multis                `protobuf:"bytes,12,opt,name=multis,proto3" json:"multis,omitempty"`                                                                    // deprecated
	XchangeMultiPattern     string                 `protobuf:"bytes,13,opt,name=xchange_multi_pattern,json=xchangeMultiPattern,proto3" json:"xchange_multi_pattern,omitempty"`             // deprecated
	CountPerBand            bool                   `protobuf:"varint,14,opt,name=count_per_band,json=countPerBand,proto3" json:"count_per_band,omitempty"`                                 // deprecated
	CabrilloQsoTemplate     string                 `protobuf:"bytes,15,opt,name=cabrillo_qso_template,json=cabrilloQsoTemplate,proto3" json:"cabrillo_qso_template,omitempty"`             // deprecated
	CallHistoryFilename     string                 `protobuf:"bytes,16,opt,name=call_history_filename,json=callHistoryFilename,proto3" json:"call_history_filename,omitempty"`
	DefinitionYaml          string                 `protobuf:"bytes,18,opt,name=definition_yaml,json=definitionYaml,proto3" json:"definition_yaml,omitempty"`
	ExchangeValues          []string               `protobuf:"bytes,19,rep,name=exchange_values,json=exchangeValues,proto3" json:"exchange_values,omitempty"`
	GenerateSerialExchange  bool                   `protobuf:"varint,20,opt,name=generate_serial_exchange,json=generateSerialExchange,proto3" json:"generate_serial_exchange,omitempty"`
	CallHistoryFieldNames   []string               `protobuf:"bytes,21,rep,name=call_history_field_names,json=callHistoryFieldNames,proto3" json:"call_history_field_names,omitempty"`
	QsosGoal                int32                  `protobuf:"varint,22,opt,name=qsos_goal,json=qsosGoal,proto3" json:"qsos_goal,omitempty"`
	PointsGoal              int32                  `protobuf:"varint,23,opt,name=points_goal,json=pointsGoal,proto3" json:"points_goal,omitempty"`
	MultisGoal              int32                  `protobuf:"varint,24,opt,name=multis_goal,json=multisGoal,proto3" json:"multis_goal,omitempty"`
	SprintOperation         bool                   `protobuf:"varint,25,opt,name=sprint_operation,json=sprintOperation,proto3" json:"sprint_operation,omitempty"`
	StartTime               *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	GenerateReport          bool                   `protobuf:"varint,27,opt,name=generate_report,json=generateReport,proto3" json:"generate_report,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Contest) Reset() {
	*x = Contest{}
	mi := &file_log_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{4}
}

func (x *Contest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contest) GetEnterTheirNumber() bool {
	if x != nil {
		return x.EnterTheirNumber
	}
	return false
}

func (x *Contest) GetEnterTheirXchange() bool {
	if x != nil {
		return x.EnterTheirXchange
	}
	return false
}

func (x *Contest) GetRequireTheirXchange() bool {
	if x != nil {
		return x.RequireTheirXchange
	}
	return false
}

func (x *Contest) GetAllowMultiBand() bool {
	if x != nil {
		return x.AllowMultiBand
	}
	return false
}

func (x *Contest) GetAllowMultiMode() bool {
	if x != nil {
		return x.AllowMultiMode
	}
	return false
}

func (x *Contest) GetSameCountryPoints() int32 {
	if x != nil {
		return x.SameCountryPoints
	}
	return 0
}

func (x *Contest) GetSameContinentPoints() int32 {
	if x != nil {
		return x.SameContinentPoints
	}
	return 0
}

func (x *Contest) GetSpecificCountryPoints() int32 {
	if x != nil {
		return x.SpecificCountryPoints
	}
	return 0
}

func (x *Contest) GetSpecificCountryPrefixes() []string {
	if x != nil {
		return x.SpecificCountryPrefixes
	}
	return nil
}

func (x *Contest) GetOtherPoints() int32 {
	if x != nil {
		return x.OtherPoints
	}
	return 0
}

func (x *Contest) GetMultis() *Multis {
	if x != nil {
		return x.Multis
	}
	return nil
}

func (x *Contest) GetXchangeMultiPattern() string {
	if x != nil {
		return x.XchangeMultiPattern
	}
	return ""
}

func (x *Contest) GetCountPerBand() bool {
	if x != nil {
		return x.CountPerBand
	}
	return false
}

func (x *Contest) GetCabrilloQsoTemplate() string {
	if x != nil {
		return x.CabrilloQsoTemplate
	}
	return ""
}

func (x *Contest) GetCallHistoryFilename() string {
	if x != nil {
		return x.CallHistoryFilename
	}
	return ""
}

func (x *Contest) GetDefinitionYaml() string {
	if x != nil {
		return x.DefinitionYaml
	}
	return ""
}

func (x *Contest) GetExchangeValues() []string {
	if x != nil {
		return x.ExchangeValues
	}
	return nil
}

func (x *Contest) GetGenerateSerialExchange() bool {
	if x != nil {
		return x.GenerateSerialExchange
	}
	return false
}

func (x *Contest) GetCallHistoryFieldNames() []string {
	if x != nil {
		return x.CallHistoryFieldNames
	}
	return nil
}

func (x *Contest) GetQsosGoal() int32 {
	if x != nil {
		return x.QsosGoal
	}
	return 0
}

func (x *Contest) GetPointsGoal() int32 {
	if x != nil {
		return x.PointsGoal
	}
	return 0
}

func (x *Contest) GetMultisGoal() int32 {
	if x != nil {
		return x.MultisGoal
	}
	return 0
}

func (x *Contest) GetSprintOperation() bool {
	if x != nil {
		return x.SprintOperation
	}
	return false
}

func (x *Contest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Contest) GetGenerateReport() bool {
	if x != nil {
		return x.GenerateReport
	}
	return false
}

type Multis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dxcc          bool                   `protobuf:"varint,1,opt,name=dxcc,proto3" json:"dxcc,omitempty"`       // deprecated
	Wpx           bool                   `protobuf:"varint,2,opt,name=wpx,proto3" json:"wpx,omitempty"`         // deprecated
	Xchange       bool                   `protobuf:"varint,3,opt,name=xchange,proto3" json:"xchange,omitempty"` // deprecated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Multis) Reset() {
	*x = Multis{}
	mi := &file_log_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Multis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multis) ProtoMessage() {}

func (x *Multis) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multis.ProtoReflect.Descriptor instead.
func (*Multis) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{5}
}

func (x *Multis) GetDxcc() bool {
	if x != nil {
		return x.Dxcc
	}
	return false
}

func (x *Multis) GetWpx() bool {
	if x != nil {
		return x.Wpx
	}
	return false
}

func (x *Multis) GetXchange() bool {
	if x != nil {
		return x.Xchange
	}
	return false
}

type Keyer struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Wpm                   int32                  `protobuf:"varint,1,opt,name=wpm,proto3" json:"wpm,omitempty"`
	SpMacros              []string               `protobuf:"bytes,2,rep,name=sp_macros,json=spMacros,proto3" json:"sp_macros,omitempty"`
	RunMacros             []string               `protobuf:"bytes,3,rep,name=run_macros,json=runMacros,proto3" json:"run_macros,omitempty"`
	SpLabels              []string               `protobuf:"bytes,4,rep,name=sp_labels,json=spLabels,proto3" json:"sp_labels,omitempty"`
	RunLabels             []string               `protobuf:"bytes,5,rep,name=run_labels,json=runLabels,proto3" json:"run_labels,omitempty"`
	ParrotIntervalSeconds int32                  `protobuf:"varint,6,opt,name=parrot_interval_seconds,json=parrotIntervalSeconds,proto3" json:"parrot_interval_seconds,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Keyer) Reset() {
	*x = Keyer{}
	mi := &file_log_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Keyer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyer) ProtoMessage() {}

func (x *Keyer) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyer.ProtoReflect.Descriptor instead.
func (*Keyer) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{6}
}

func (x *Keyer) GetWpm() int32 {
	if x != nil {
		return x.Wpm
	}
	return 0
}

func (x *Keyer) GetSpMacros() []string {
	if x != nil {
		return x.SpMacros
	}
	return nil
}

func (x *Keyer) GetRunMacros() []string {
	if x != nil {
		return x.RunMacros
	}
	return nil
}

func (x *Keyer) GetSpLabels() []string {
	if x != nil {
		return x.SpLabels
	}
	return nil
}

func (x *Keyer) GetRunLabels() []string {
	if x != nil {
		return x.RunLabels
	}
	return nil
}

func (x *Keyer) GetParrotIntervalSeconds() int32 {
	if x != nil {
		return x.ParrotIntervalSeconds
	}
	return 0
}

type QTC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Frequency     float64                `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Band          string                 `protobuf:"bytes,3,opt,name=band,proto3" json:"band,omitempty"`
	Mode          string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Kind          int32                  `protobuf:"varint,5,opt,name=kind,proto3" json:"kind,omitempty"`
	QsoNumber     int32                  `protobuf:"varint,6,opt,name=qso_number,json=qsoNumber,proto3" json:"qso_number,omitempty"`
	TheirCallsign string                 `protobuf:"bytes,7,opt,name=their_callsign,json=theirCallsign,proto3" json:"their_callsign,omitempty"`
	Header        string                 `protobuf:"bytes,8,opt,name=header,proto3" json:"header,omitempty"`
	QtcTime       string                 `protobuf:"bytes,9,opt,name=qtc_time,json=qtcTime,proto3" json:"qtc_time,omitempty"`
	QtcCallsign   string                 `protobuf:"bytes,10,opt,name=qtc_callsign,json=qtcCallsign,proto3" json:"qtc_callsign,omitempty"`
	QtcNumber     int32                  `protobuf:"varint,11,opt,name=qtc_number,json=qtcNumber,proto3" json:"qtc_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QTC) Reset() {
	*x = QTC{}
	mi := &file_log_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QTC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QTC) ProtoMessage() {}

func (x *QTC) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QTC.ProtoReflect.Descriptor instead.
func (*QTC) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{7}
}

func (x *QTC) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QTC) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *QTC) GetBand() string {
	if x != nil {
		return x.Band
	}
	return ""
}

func (x *QTC) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *QTC) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *QTC) GetQsoNumber() int32 {
	if x != nil {
		return x.QsoNumber
	}
	return 0
}

func (x *QTC) GetTheirCallsign() string {
	if x != nil {
		return x.TheirCallsign
	}
	return ""
}

func (x *QTC) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *QTC) GetQtcTime() string {
	if x != nil {
		return x.QtcTime
	}
	return ""
}

func (x *QTC) GetQtcCallsign() string {
	if x != nil {
		return x.QtcCallsign
	}
	return ""
}

func (x *QTC) GetQtcNumber() int32 {
	if x != nil {
		return x.QtcNumber
	}
	return 0
}

var File_log_proto protoreflect.FileDescriptor

var file_log_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x31, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x03, 0x71, 0x73, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e,
	0x51, 0x53, 0x4f, 0x48, 0x00, 0x52, 0x03, 0x71, 0x73, 0x6f, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x6b, 0x65, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x4b, 0x65, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x03, 0x71, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x54, 0x43, 0x48, 0x00, 0x52, 0x03, 0x71, 0x74, 0x63, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xe6, 0x03, 0x0a, 0x03, 0x51, 0x53, 0x4f, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x68, 0x65, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x79, 0x58, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x58, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x79, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0x5b,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9d, 0x09, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x65, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x68, 0x65,
	0x69, 0x72, 0x58, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x54, 0x68, 0x65, 0x69, 0x72, 0x58, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x73, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x52, 0x06, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61,
	0x62, 0x72, 0x69, 0x6c, 0x6c, 0x6f, 0x5f, 0x71, 0x73, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x62, 0x72, 0x69,
	0x6c, 0x6c, 0x6f, 0x51, 0x73, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x73, 0x6f, 0x73, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x73, 0x6f, 0x73,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x22, 0x48, 0x0a, 0x06, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x78, 0x63, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x78, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x70, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x70, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x70, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x70,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75,
	0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x75, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x72,
	0x72, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x61, 0x72, 0x72,
	0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0xb8, 0x02, 0x0a, 0x03, 0x51, 0x54, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x73, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x74,
	0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x74, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x74, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x71, 0x74, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x4e, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x4f, 0x52, 0x4b,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x50, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x4f,
	0x52, 0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x42, 0x09, 0x5a, 0x07,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData []byte
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)))
	})
	return file_log_proto_rawDescData
}

var file_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_log_proto_goTypes = []any{
	(Workmode)(0),                 // 0: pb.Workmode
	(*FileInfo)(nil),              // 1: pb.FileInfo
	(*Entry)(nil),                 // 2: pb.Entry
	(*QSO)(nil),                   // 3: pb.QSO
	(*Station)(nil),               // 4: pb.Station
	(*Contest)(nil),               // 5: pb.Contest
	(*Multis)(nil),                // 6: pb.Multis
	(*Keyer)(nil),                 // 7: pb.Keyer
	(*QTC)(nil),                   // 8: pb.QTC
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_log_proto_depIdxs = []int32{
	3, // 0: pb.Entry.qso:type_name -> pb.QSO
	4, // 1: pb.Entry.station:type_name -> pb.Station
	5, // 2: pb.Entry.contest:type_name -> pb.Contest
	7, // 3: pb.Entry.keyer:type_name -> pb.Keyer
	8, // 4: pb.Entry.qtc:type_name -> pb.QTC
	0, // 5: pb.QSO.workmode:type_name -> pb.Workmode
	6, // 6: pb.Contest.multis:type_name -> pb.Multis
	9, // 7: pb.Contest.start_time:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	file_log_proto_msgTypes[1].OneofWrappers = []any{
		(*Entry_Qso)(nil),
		(*Entry_Station)(nil),
		(*Entry_Contest)(nil),
		(*Entry_Keyer)(nil),
		(*Entry_Qtc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		EnumInfos:         file_log_proto_enumTypes,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
